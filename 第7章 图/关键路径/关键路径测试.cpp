
//**************************引入头文件*****************************
#include <stdio.h>   //使用了标准库函数 
#include <stdlib.h>  //使用了动态内存分配函数 

#include "my_constants.h"  //引入自定义的符号常量，主要是状态码 
#include "ALGraph.h"       //引入图的邻接表存储结构定义 
#include "LinkedList.cpp"  //引入单链表实现，用到其中的插入、删除等操作 
#include "ALGraph.cpp"     //引入图的邻接表存储结构基本操作实现
#include "Stack.cpp"       //引入顺序栈的基本操作实现 
#include "CriticalPath.cpp" //引入图的关键路径算法实现 

int main() {
	
	printf("----------------图的关键路径（邻接表）演示程序------------------\n\n"); 
	
	//图的邻接表存储方式 
	ALGraph G;
	
	//创建图g并打印初始状态 
	printf("->测试图G的创建：(关键路径需要图的类型为有向网，请输入1)\n"); 
	CreateGraph(G);
	printf("图G创建成功！\n");
	printf("->打印创建后的图G：\n"); 
	Display(G);
	
	//测试拓扑排序 
	printf("\n->关键路径计算结果：\n"); 
	CriticalPath(G);
	
	//测试销毁图G
	printf("\n->测试销毁图G:"); 
	DestroyGraph(G);
	printf("销毁成功！");
	
	printf("演示结束");
}//main

/*
	参考书上P182页图7.28 

----------------图的关键路径（邻接表）演示程序------------------

->测试图G的创建：(关键路径需要图的类型为有向网，请输入1)
请输入图的类型(有向图输入0, 有向网输入1,无向图输入2,无向网输入3): 1
请输入图的顶点数,边数: 11,15
请输入11个顶点的值(用空格隔开):
1 2 3 4 5 6 7 8 9 10 11
请输入每条弧(边)的弧尾、弧头和权值(以逗号作为间隔):
1,2,3
1,3,4
2,4,2
2,5,1
3,5,3
3,6,5
4,7,6
5,7,8
5,8,4
6,9,2
7,11,7
8,10,4
8,9,10
9,10,1
10,11,6
图G创建成功！
->打印创建后的图G：
此图为有向网!

图中共有11个顶点，15条弧(边)，它们分别是：
+----+-----------------------------------------------
|顶点|   邻接顶点(和权值)
+----+-----------------------------------------------
|  1 | →3 ,权值:4  →2 ,权值:3
+----+-----------------------------------------------
|  2 | →5 ,权值:1  →4 ,权值:2
+----+-----------------------------------------------
|  3 | →6 ,权值:5  →5 ,权值:3
+----+-----------------------------------------------
|  4 | →7 ,权值:6
+----+-----------------------------------------------
|  5 | →8 ,权值:4  →7 ,权值:8
+----+-----------------------------------------------
|  6 | →9 ,权值:2
+----+-----------------------------------------------
|  7 | →11 ,权值:7
+----+-----------------------------------------------
|  8 | →9 ,权值:10  →10 ,权值:4
+----+-----------------------------------------------
|  9 | →10 ,权值:1
+----+-----------------------------------------------
| 10 | →11 ,权值:6
+----+-----------------------------------------------
| 11 |
+----+-----------------------------------------------


->关键路径计算结果：
->求得的拓扑序列：1 2 4 3 5 7 8 6 9 10 11
->通过拓扑排序，图中没有环！

+----------------------------------------------------------------------------+
|                                顶点（事件）                                |
+----------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|     i    |   0 |   1 |   2 |   3 |   4 |   5 |   6 |   7 |   8 |   9 |  10 |
+----------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|   顶点   |   1 |   2 |   3 |   4 |   5 |   6 |   7 |   8 |   9 |  10 |  11 |
+----------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|    ve    |   0 |   3 |   4 |   5 |   7 |   9 |  15 |  11 |  21 |  22 |  28 |
+----------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|    vl    |   0 |   6 |   4 |  15 |   7 |  19 |  21 |  11 |  21 |  22 |  28 |
+----------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
| 关键路径 |  √ |     |  √ |     |  √ |     |     |  √ |  √ |  √ |  √ |
+----------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+

+------+------+------+------+------+----------+
|                  活动（边）                 |
+------+------+------+------+------+----------+
| 弧尾 | 弧头 | 权值 |  ee  |  el  | 关键活动 |
+------+------+------+------+------+----------+
|    1 |    3 |    4 |    0 |    0 |    √    |
+------+------+------+------+------+----------+
|    1 |    2 |    3 |    0 |    3 |          |
+------+------+------+------+------+----------+
|    2 |    5 |    1 |    3 |    6 |          |
+------+------+------+------+------+----------+
|    2 |    4 |    2 |    3 |   13 |          |
+------+------+------+------+------+----------+
|    3 |    6 |    5 |    4 |   14 |          |
+------+------+------+------+------+----------+
|    3 |    5 |    3 |    4 |    4 |    √    |
+------+------+------+------+------+----------+
|    4 |    7 |    6 |    5 |   15 |          |
+------+------+------+------+------+----------+
|    5 |    8 |    4 |    7 |    7 |    √    |
+------+------+------+------+------+----------+
|    5 |    7 |    8 |    7 |   13 |          |
+------+------+------+------+------+----------+
|    6 |    9 |    2 |    9 |   19 |          |
+------+------+------+------+------+----------+
|    7 |   11 |    7 |   15 |   21 |          |
+------+------+------+------+------+----------+
|    8 |    9 |   10 |   11 |   11 |    √    |
+------+------+------+------+------+----------+
|    8 |   10 |    4 |   11 |   18 |          |
+------+------+------+------+------+----------+
|    9 |   10 |    1 |   21 |   21 |    √    |
+------+------+------+------+------+----------+
|   10 |   11 |    6 |   22 |   22 |    √    |
+------+------+------+------+------+----------+

->测试销毁图G:销毁成功！演示结束
--------------------------------
Process exited with return value 0
Press any key to continue . . .

*/ 
